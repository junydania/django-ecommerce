---
AWSTemplateFormatVersion: '2010-09-09'
Description: A singe AZ multi AEM instance VPC, a production like environment without
  full HA.

Parameters:
  pKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: aawe
    
  pInstanceType:
    Description: EC2 instance type, recommended a large instance e.g. m4.large
    Type: String
    Default: m4.large
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge

  pSSHLocation:
    Description: Your Public IP address range that will be given access for SSH access
      to your EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pAEMDownloadUrl:
    Description: A URL to your AEM_6.1_Quickstart.jar packaged as a Zip, The Cloud
      Init script will download the zip and unpack accordingly
    Type: String
    Default: 'https://gsdm-installers.s3-us-west-2.amazonaws.com/AEM_6.1_Quickstart.zip'
    MinLength: '1'

  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: >
      VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription : must be the VPC Id of an existing Virtual Private Cloud.
    Default: vpc-086163376c749d23b

  pDmzSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      The SubnetIDs to deploy the Loadbalancer into
    ConstraintDescription : must be a Subnet Id within the selected VPC Id.
    Default: subnet-097a466a81a367248,subnet-0ba27f4a44d62d200

  pPrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      The SubnetIDs to deploy the Loadbalancer into
    ConstraintDescription : must be a Subnet Id within the selected VPC Id.
    Default: subnet-076eff59dd905cdff,subnet-053379c39b342b7e6

  pTLD:
    Type: String
    Description: TLD name needed by Route53 to perform DNS (example.com)
    Default: 'dev.airforce.com'

  pPath:
    Type: String
    Default: '/'
    Description: Service path

  pDomain:
    Type: String
    Description: Domain name for your cms (cms.example.com)
    Default: 'www.dev.airforce.com'

  pSSL:
    Type: String
    Description: >
      The ACM SSL ARN for your Domain. If setting up CDN, use a wildcard
      certificate to allow the CDN endpoint and the LoadBalancer endpoint
      to leverage same SSL Certificate ARN.
    Default: 'arn:aws:acm:us-east-1:700832445873:certificate/9e27e688-c5e2-4b07-ae79-4b645c38a97e'

Mappings:
  ## All Support HVM64 NATHVM64 arch
  AWSRegionAMI:
    us-east-1:
      AMI: ami-00b882ac5193044e4
    us-west-2:
      AMI: ami-c229c0a2
    us-west-1:
      AMI: ami-1b0f7d7b
    us-gov-west-1:
      AMI: ami-1b0f7d7b

Resources:

  rEc2pub:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Config
          - InstallLogs
          - InstallAem
          - Run
        Config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rEc2pub.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rEc2pub --configsets InstallAndRun  --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallLogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state
                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = EC2Pub/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = EC2Pub/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = EC2Pub/cfn-init.log
                datetime_format =

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = EC2Pub/cfn-hup.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = Ec2pub/cfn-wire.log
                datetime_format =

                [/var/log/httpd]
                file = /var/log/httpd/*
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = EC2Pub/httpd
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content:  !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
        InstallAem:
          packages:
            yum: {}
          sources:
            /etc/aem: !Ref pAEMDownloadUrl
          commands:
            02_mkdir_publish:
              command: mkdir publish
              cwd: "/etc/aem"
            04_copy_publish:
              command: cp AEM_6.1_Quickstart.jar publish
              cwd: "/etc/aem"
            06_publish_unpack:
              command: java -jar AEM_6.1_Quickstart.jar -unpack
              cwd: "/etc/aem/publish"
        Run:
          commands:
            02_start_publisher:
              command: CQ_RUNMODE=publish ./start
              cwd: "/etc/aem/publish/crx-quickstart/bin"
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref pInstanceType
      KeyName: !Ref pKeyName
      NetworkInterfaces:
      - DeleteOnTermination: true
        Description: Primary network interface
        DeviceIndex: '0'
        SubnetId: !Select [ "0", !Ref pPrivateSubnetIds ]
        GroupSet:
          - !Ref rSGPublic
          - !Ref rSGIntraAemNode
        AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y 
          yum install -y aws-cfn-bootstrap
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rEc2pub --configsets InstallAndRun --region ${AWS::Region}
          ls -sail
          # Signal the status from cfn-init\n"
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rEc2pub --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

  rEc2Dispatch:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
        Install:
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
          commands:
            '01':
              command: service httpd start
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref pInstanceType
      KeyName:
        !Ref pKeyName
      NetworkInterfaces:
      - DeleteOnTermination: true
        Description: Primary network interface
        DeviceIndex: '0'
        SubnetId: !Select [ "0", !Ref pPrivateSubnetIds ]
        GroupSet:
          - !Ref rSGDispatch
          - !Ref rSGIntraAemNode
        #AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y 
          yum install -y aws-cfn-bootstrap
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v  --stack ${AWS::StackName} --resource rEc2Dispatch  --configsets InstallAndRun --region ${AWS::Region}
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rEc2Dispatch --region ${AWS::Region}

  rEc2auth:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Config
          - InstallLogs
          - InstallAem
          - Run
        Config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rEc2auth.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rEc2auth --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root  
              group: root  
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallLogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/cfn-init.log
                datetime_format =

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/cfn-hup.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/cfn-wire.log
                datetime_format =

                [/var/log/httpd]
                file = /var/log/httpd/*
                log_group_name = ${rCloudFormationLogs}
                log_stream_name = rEc2auth/httpd
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs

                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
        InstallAem:
          packages:
            yum: {}
          sources:
            /etc/aem: !Ref pAEMDownloadUrl
          commands:
            01_mkdir_author:
              command: mkdir author
              cwd: "/etc/aem"
            03_copy_author:
              command: cp AEM_6.1_Quickstart.jar author
              cwd: "/etc/aem"
            05_author_unpack:
              command: java -jar AEM_6.1_Quickstart.jar -unpack
              cwd: "/etc/aem/author"
        Run:
          commands:
            01_start_author:
              command: ./start
              cwd: /etc/aem/author/crx-quickstart/bin
    Properties:
      ImageId:  !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref pInstanceType
      KeyName: !Ref pKeyName
      NetworkInterfaces:
      - DeleteOnTermination: true
        Description: Primary network interface
        DeviceIndex: '0'
        SubnetId: !Select [ "0", !Ref pPrivateSubnetIds ]
        GroupSet:
          - !Ref rSGAuth
          - !Ref rSGIntraAemNode
        # AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rEc2auth --configsets InstallAndRun --region ${AWS::Region}
          ls -sail
          # Signal the status from cfn-init\n"
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rEc2auth --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

  rSGAuth:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: rSGAuth
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: rSGAuth
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 4502
          ToPort: 4502
          CidrIp: 0.0.0.0/0
          ## commented out while testing
          # CidrIp: !Ref pSSHLocation
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  rSGDispatch:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: rSGDispatch
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: rSGDispatch
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pSSHLocation
        ## Allow all Traffic from LoadBalancer nodes
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref rLoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  ## Publisher Security
  rSGPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Publisher Security Group
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: rSGPublic
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 4502
          ToPort: 4502
          CidrIp: 0.0.0.0/0
          ## commented out while testing
          # CidrIp: !Ref pSSHLocation
        ## Allow all Traffic from Dispatcher nodes
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref rSGDispatch
        ## Allow all Traffic from Author nodes
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref rSGAuth
        ## Allow all Traffic from LoadBalancer nodes
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref rLoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  ## Internode Access
  rSGIntraAemNode:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM intra-node communication
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: rSGIntraAemNode
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  ## Rule for Intra Node Access
  rSGIntraAemNodeIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref rSGIntraAemNode
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref rSGIntraAemNode


  rLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*"

  rLogRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref rLogRole

  rCloudFormationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  ## Network Configurations
  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub  ${AWS::StackName}-aem-lb
      Subnets: !Ref pDmzSubnetIds
      SecurityGroups:
      - !Ref rLoadBalancerSecurityGroup

  # rDomainDNS:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !Join ['', [ !Ref pTLD, '.']]
  #     RecordSets:
  #       - Name: !Ref pDomain
  #         Type: 'A'
  #         AliasTarget:
  #           HostedZoneId: !GetAtt rLoadBalancer.CanonicalHostedZoneID
  #           DNSName: !GetAtt rLoadBalancer.DNSName

  rLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref pVpcId
      GroupDescription: Access to the load balancer
      SecurityGroupIngress:
        # Allow access from anywhere for standard paorts
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref pVpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: 'true'
        - Key: 'stickiness.type'
          Value: 'lb_cookie'

  rLoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

  rLoadBalancerListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rLoadBalancer
      Port: 443
      Protocol: 'HTTPS'
      Certificates:
        - CertificateArn: !Ref pSSL
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

  rListenerRuleHttps:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref rLoadBalancerListenerHttps
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub ${pPath}*
      Actions:
        - TargetGroupArn: !Ref rTargetGroup
          Type: forward

  rListenerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref rLoadBalancerListenerHttp
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub ${pPath}*
      Actions:
        - TargetGroupArn: !Ref rTargetGroup
          Type: forward


  ## Instance Profiles
  ## EC2 IAM Roles
  rAemRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Sub "aem-role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'

  rAemInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "aem-profile-${AWS::StackName}"
      Path: /
      Roles:
        - !Ref rAemRole


# Outputs:

#   oAuthinstanceid:
#     Description: InstanceId of the newly created Author instance
#     Value: !Ref rEc2auth

#   oAuthpublicdns:
#     Description: Public DNSName of the newly created Author instance
#     Value: !GetAtt rEc2auth.PublicDnsName

#   oAuthpublicip:
#     Description: Public IP address of the newly created Author instance
#     Value: !GetAtt rEc2auth.PublicIp

#   oPubinstanceid:
#     Description: InstanceId of the newly created Publisher instance
#     Value: !Ref rEc2pub

#   oPubpublicdns:
#     Description: Public DNSName of the newly created Publisher instance
#     Value: !GetAtt rEc2pub.PublicDnsName

#   oPubpublicip:
#     Description: Public IP address of the newly created Publisher instance
#     Value: !GetAtt rEc2pub.PublicIp

#   oDispinstanceid:
#     Description: InstanceId of the newly created Dispatcher instance
#     Value: !Ref rEc2Dispatch

#   oDisppublicdns:
#     Description: Public DNSName of the newly created Dispatcher instance
#     Value: !GetAtt rEc2Dispatch.PublicDnsName

#   oDisppublicip:
#     Description: Public IP address of the newly created Dispatcher instance
#     Value: !GetAtt rEc2Dispatch.PublicIp
